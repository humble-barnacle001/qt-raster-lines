name: Linux Release CI

on:
    push:
        branches: [main]
        paths:
            [
                "**/*.cpp",
                "**/*.ui",
                "**/*.h",
                "**/*.pro",
                "**/*.pri",
                ".github/workflows/linux.yml",
                "linux/*"
            ]
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v2
            - name: Cache Qt
              id: cache-qt
              uses: actions/cache@v1
              with:
                  path: "${{ github.workspace }}/Qt/"
                  key: ${{ runner.os }}-QtCache-v2
            - name: Install Qt
              uses: jurplel/install-qt-action@v2
              with:
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}
                  dir: ${{ github.workspace }}/Qt/
            - run: qmake --version
            - name: Create release directory
              run: mkdir release
            - name: Run Qmake
              run: qmake ${{ github.workspace }}/raster-draw.pro -spec linux-g++ CONFIG+=qtquickcompiler
              working-directory: ./release
            - name: Build Makefile
              run: make Makefile qmake_all
              working-directory: ./release
            - name: Build from Makefile
              run: make -j4
              working-directory: ./release

            - run: ls -lah
            - run: ls -lah ./release
            - run: ldd ./release/raster-draw
            - run: find {{ github.workspace }}/release \( -name "moc_*" -or -name "*.o" -or -name "*.h" -or -name "qrc_*" -or -name "Makefile*" -or -name "*.a" \) -exec rm {} \;

            - run: cp -r {{ github.workspace }}/linux/* ${{ github.workspace }}/release

            - name: Create AppImage
              working-directory: ./release
              run: |
              wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
              chmod a+x linuxdeployqt-continuous-x86_64.AppImage
              QT_QPA_PLATFORM_PLUGIN_PATH={{ env.QT_PLUGIN_PATH }}
              ./linuxdeployqt-continuous-x86_64.AppImage ./raster-draw -appimage -unsupported-allow-new-glibc
              [[ -f "qt.conf" ]] && cat qt.conf

            - run: ls -lah ./release
            - run: ldd ./release/raster-draw

            - name: Upload a Build Artifact
              uses: actions/upload-artifact@v2.2.4
              with:
                  path: "release/Application-x86_64.AppImage"
